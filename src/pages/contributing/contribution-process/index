---
title: Contribution process
description:
  In order to contribute to the Carbon ecosystem, it’s essential that we explain Carbon’s process, clearly define milestones in each phase of contribution, and offer a clear “definition of done” for our contributors. 
---

<PageDescription>

In order to contribute to the Carbon ecosystem, it’s essential that we explain Carbon’s process, clearly define milestones in each phase of contribution, and offer a clear “definition of done” for our contributors. 

</PageDescription>

<AnchorLinks>

<AnchorLink>Product Development Lifecycle</AnchorLink>
<AnchorLink>Discovery</AnchorLink>
<AnchorLink>Delivery</AnchorLink>
<AnchorLink>Launch and scale</AnchorLink>

</AnchorLinks>

## Product Development Lifecycle

Last year IBM debuted a new process framework called the Product Development Lifecycle (PDLC). IBM defines the PDLC as the process of taking a product capability from an idea through its development and release to market, and beyond. Since product development takes place in a continuously evolving market, the framework creates room for validation in every phase of the lifecycle.

The PDLC is organized into three phases: discovery, delivery, and launch & scale. Once a product is in market, agile product teams do all these types of work concurrently, in parallel work streams, with feedback from in-market learnings shaping the priorities of both discovery and delivery.

- **Discovery phase**: the purpose of the discovery phase is to address any major value, usability, feasibility and viability risks ahead of delivering product-quality code, in order to arrive at a successful product faster and at a lower cost. 
- **Delivery phase**: the delivery phase emphasizes the disciplined execution of determining how we will realize user value and maximizing the efficiency of building it. This includes the functional and non-functional requirements, and the user experience required for customers to adopt product features within a production setting. 
- **Launch and scale**: Launch and scale of course, involves having clearly defined success criteria or learning objectives that are monitored after launch. In this phase an asset will become stable and achieve Carbon’s “definition of done.”

_For IBMers only_: You can read more about the PDLC on [IBM’s Winning Products](https//w3.ibm.com/w3publisher/winning-products/how-we-work/product-development-lifecycle) website.

<Row>
<Column colLg={12}>

![Diagram of the PDLC process](images/PDLC-01.png)

</Column>
</Row>

### Phased contribution 

The Carbon team is especially good at organizing the delivery and launch and scale parts of this framework. We run agile scrum like a product team and Carbon’s cross-functional leadership ensures that we prioritize and execute work through the lenses of Product Management, Design, and Engineering simultaneously. This gives us credibility across IBM Software.

However, we know our weaknesses too. We need to pair with UX Researchers and subject matter experts from product teams to truly accelerate the discovery phase—as we learned during the Carbon for AI work last year. The Carbon team played a crucial role in helping IBM’s AI experts deliver and operationalize a distinct point of view on AI design and it sparked a change in the way we collaborate across teams. 

We have taken the PDLC framework and applied it to how we expect new components, features, and patterns to be contributed to Carbon. We have broken the contribution process up into three phases, each having their own set of success criteria and deliverables.

## Discovery 

The discovery phase is where research, exploration, and validation happen. This is when innovations to the system are proposed and reviewed.

### Discovery criteria 

For an enhancement or net new component to warrant resourcing a discovery phase, we need to determine the requirements for a component/pattern to be considered as an innovation. Proposals need to show that the component or pattern would be “useful and unique.”

#### Key considerations:
– Does it replicate anything in the system already, or is there truly a gap?
– If the proposal does replicate an existing asset, is there evidence to show that the proposed solution is better?
– Is there already an existing issue or proposal in [Github](https://github.com/carbon-design-system/carbon/issues) to address the gap?
– Is there evidence that the new asset or enhancement would be useful for many teams or services?
– What is the ratio of feasibility to impact to help prioritize (consult developers and accessibility SMEs)?

### Discovery deliverables 

All deliverables in discovery phase are to be completed by the contributor or proposal requestor. 

| Deliverable | Description |
|-------------|-------------|
| Github issue | Open a [feature request or enhancement issue](https://github.com/carbon-design-system/carbon/issues/new?assignees=&labels=type%3A+enhancement+%F0%9F%92%A1&projects=&template=FEATURE_REQUEST_OR_ENHANCEMENT.yaml&title=%5BFeature+Request%5D%3A+) in the Carbon GitHub outlining the gap that needs to be resolved. The issue should include all supporting materials and evidence you have gathered in the discovery phase. This can include competitive research, potential solutions, or prototypes. |
| DSAG/DSIT presentation | _For IBMers only_: Present your findings at a Design System Adoption Guild (DSAG) or a Design System Implementation Team (DSIT) meeting. [Sign up](https://ibm.box.com/s/3ly1d50o7rde5pnp8v88c1758z2xxhso) for a time slot when you are ready.

#### Evaluation and next steps
The Carbon team, DSAG, and DSIT will review the proposal and determine next steps for the proposal. 

Not all proposals in the discovery phase will move on in the lifecycle, some explorations may not gain traction or may be deprioritized by other efforts. This does not mean they are not valid or shouldn’t be used; it only means it currently isn’t a priority to systematize at the core level. 

It’s also important to note that Carbon does not take on ownership and maintenance of certain types of assets like full applications, third party tooling, and shared services. For example, although it is shared tooling, the Carbon team does not include the Carbon for AI chat or IBM Assist Me in its libraries. 

### Component versus pattern

Defining and standardizing our terms across the ecosystem is crucial as we align against the PDLC. In the past, teams operated under very different assumptions about what a “pattern” versus “component” is. It has been difficult to move towards stability without everyone being on the same page in this respect. 

Eventually, all Carbon and Carbon for IBM Products resources (e.g. libraries, assets, design kits) will follow a schema to standardize definitions and documentation. However, for now, we’re just going to focus on defining the two most important assets in our ecosystem.

| Asset | Definition | 
|-------|------------|
| Component | An asset that has been designed and coded, that can be imported into a UI. |
| Pattern | Patterns are something that can be accomplished in multiple ways utilizing a combination of component(s) with additional design considerations. Because of the many ways patterns can be implemented, it is not possible to provide code for every scenario, but some patterns do have example code. |

## Delivery 

In the delivery phase, the Carbon team usually collaborates with a workgroup or discovery team to begin to codify and implement their asset as experimental in the Carbon library. 

### Prioritization

Once a contribution enters the delivery phase it must be prioritized against the other contributions and work streams. The most important factor in determining prioritization in the contribution pipeline is business impact. The greater the case for reuse or support for a high impact team, the more likely a proposal is to move up in the pipeline and garner more Carbon resources.

### Delivery criteria

As a component or pattern enters the delivery phase, we begin to consider the requirements for an asset to reach "stable.” By aligning across the Carbon ecosystem on our requirements for stability—or a “definition of done”— we not only share our expectations with contributors, but we can more easily create a backlog of work to prioritize, and more clearly display the status of assets to users.

#### Key milestones:
– Carbon resource(s) form a squad with the subject matter experts and establish a feasible quarterly roadmap (3-in-a-box perspective)
– A strong source of truth has been established in Figma, including robust design specs and initial usage docs
– Identify 5–8 stakeholder teams for early usage and feedback
– Backlog work begins on kit, docs, code triumvirate per roadmap
– Any breaking changes are integrated into the Carbon library behind a feature flag

### Delivery deliverables

We have broken down the deliverables under each of the deliverable categories below in a comprehensive checklist. All requirements in the component checklist must be completed before it to be considered done. Keep in mind that a Carbon resource will always be involved in the delivery phase. 

| Deliverable | Description | 
|-------------|-------------|
| Design spec | A completed design spec that mets all requirements in the [design spec checklist](/contributing/component-checklist/#design-spec).|
| Experimental code | Experimental code that can confidently be used in product. The code does not yet need to met all [code checklist](/contributing/component-checklist/#code) requirements. Code is not required for patterns. |

## Launch and scale 

Launch and scale of course, involves having clearly defined success criteria or learning objectives that are monitored after launch. In this phase an asset will become stable and achieve Carbon’s “definition of done” as defined below.

### Launch and scale criteria

In the delivery phase, the workgroups should begin to think about the requirements for a component or pattern to become “stable.” In the launch and scale phase, all of those requirements must be met. 

By aligning on the [requirements](/contributing/component-checklist) across the ecosystem, we not only share our expectations with contributors, we help them build their backlogs. This process also allows us to begin to think about how we want to display the status of assets to users.

#### Full, peer-review completion of requirements
Along the way you should be requesting peer reviews on the various deliverables. It is crucial to get reviews early and often to make sure all requirements are accounted for. Reach out to the Carbon team if you are unsure who should review your work.

#### Final steps
— Once an asset is complete there should be a communication plan in place to raise awareness of the new work across multiple channels. 
— PMs should also begin to track the usage (product insertions) of the new asset via Figma’s API and the IBM Telemetry service.

### Launch and scale deliverables

We have broken down the deliverables under each of the deliverable categories below in a comprehensive checklist. All requirements in the component checklist must be completed for it to be considered done.

| Deliverable | Description | 
|-------------|-------------|
| Code | Code will be considered stable when all requirements in the [code checklist](/contributing/component-checklist/#code) have been met. Code is not required for patterns. |
| Design kit | A Figma component has been published in the appropriate library and mets all requirements in the [design kit checklist](/contributing/component-checklist/#design-kit). |
| Documentation | Documentation has been published in the appropriate website and mets all requirements in the [documentation checklist](/contributing/component-checklist/#documentation). |

